From ddfa37bdafcf5ae551157676f5086518f720417d Mon Sep 17 00:00:00 2001
From: Carlos O'Ryan <coryan@google.com>
Date: Tue, 6 Jun 2023 11:30:17 -0400
Subject: [PATCH 2/3] fix: better support for cross-compilation (#11782)

Allow overrides for the `protobuf::protoc` and `gRPC::grpc_cpp_plugin`
targets. On cross-compilation builds the targets point to the binaries
for the *target*, but we need binaries that can run on the *host*
build.
---
 CMakeLists.txt                           | 17 +++++++++++++++++
 cmake/CompileProtos.cmake                | 20 +++++++++++++-------
 doc/compile-time-configuration.md        | 12 ++++++++++++
 examples/hello_world_grpc/CMakeLists.txt |  2 +-
 generator/CMakeLists.txt                 |  2 +-
 5 files changed, 44 insertions(+), 9 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index cf0534da1f..028802691d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -182,6 +182,23 @@ add_custom_target(all-docfx)
 find_package(absl CONFIG REQUIRED)
 if (${GOOGLE_CLOUD_CPP_ENABLE_GRPC})
     find_package(gRPC REQUIRED QUIET)
+    # `Protobuf_PROTOC_EXECUTABLE` is pretty standard. It has been in use by
+    # CMake's FindProtobuf module for years, and it is defined by Protobuf's
+    # CMake configuration files. There is no obvious analog for the gRPC plugin.
+    # gRPC only exports the targets (e.g. `gRPC::grpc_cpp_plugin`) when
+    # applicable. We define our own variable.
+    set(GOOGLE_CLOUD_CPP_GRPC_PLUGIN_EXECUTABLE
+        $<TARGET_FILE:gRPC::grpc_cpp_plugin>
+        CACHE
+            STRING
+            [==[Override gRPC's protoc plugin location.
+`google-cloud-cpp` uses the gRPC's protoc plugin to generate gRPC stub code.
+One may need to override the default location when cross-compiling, as the gRPC
+package will point to the target environment and the plugin won't run on the
+host environment.
+]==])
+    mark_as_advanced(GOOGLE_CLOUD_CPP_GRPC_PLUGIN_EXECUTABLE)
+
     set(GOOGLE_CLOUD_CPP_FIND_DEPENDENCY_PROTOBUF
         "find_dependency(Protobuf CONFIG)")
     find_package(Protobuf CONFIG QUIET)
diff --git a/cmake/CompileProtos.cmake b/cmake/CompileProtos.cmake
index 9b0ad34ccf..bfbd4cfdf8 100644
--- a/cmake/CompileProtos.cmake
+++ b/cmake/CompileProtos.cmake
@@ -98,14 +98,17 @@ function (google_cloud_cpp_generate_proto SRCS)
         set(pb_h "${CMAKE_CURRENT_BINARY_DIR}/${D}/${file_stem}.pb.h")
         list(APPEND ${SRCS} "${pb_cc}" "${pb_h}")
 
+        if (NOT Protobuf_PROTOC_EXECUTABLE)
+            set(Protobuf_PROTOC_EXECUTABLE $<TARGET_FILE:protobuf::protoc>)
+        endif ()
         if (${_opt_LOCAL_INCLUDE})
             add_custom_command(
                 OUTPUT "${pb_cc}" "${pb_h}"
                 COMMAND
-                    $<TARGET_FILE:protobuf::protoc> ARGS --cpp_out
+                    ${Protobuf_PROTOC_EXECUTABLE} ARGS --cpp_out
                     "${CMAKE_CURRENT_BINARY_DIR}/${D}" ${protobuf_include_path}
                     "${file_name}"
-                DEPENDS "${file_path}" protobuf::protoc
+                DEPENDS "${file_path}"
                 WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${D}"
                 COMMENT "Running C++ protocol buffer compiler on ${file_path}"
                 VERBATIM)
@@ -113,10 +116,10 @@ function (google_cloud_cpp_generate_proto SRCS)
             add_custom_command(
                 OUTPUT "${pb_cc}" "${pb_h}"
                 COMMAND
-                    $<TARGET_FILE:protobuf::protoc> ARGS --cpp_out
+                    ${Protobuf_PROTOC_EXECUTABLE} ARGS --cpp_out
                     "${CMAKE_CURRENT_BINARY_DIR}" ${protobuf_include_path}
                     "${file_path}"
-                DEPENDS "${file_path}" protobuf::protoc
+                DEPENDS "${file_path}"
                 COMMENT "Running C++ protocol buffer compiler on ${file_path}"
                 VERBATIM)
         endif ()
@@ -197,15 +200,18 @@ function (google_cloud_cpp_generate_grpcpp SRCS)
             "${CMAKE_CURRENT_BINARY_DIR}/${D}/${file_stem}.grpc.pb.cc")
         set(grpc_pb_h "${CMAKE_CURRENT_BINARY_DIR}/${D}/${file_stem}.grpc.pb.h")
         list(APPEND ${SRCS} "${grpc_pb_cc}" "${grpc_pb_h}")
+        if (NOT Protobuf_PROTOC_EXECUTABLE)
+            set(Protobuf_PROTOC_EXECUTABLE $<TARGET_FILE:protobuf::protoc>)
+        endif ()
         add_custom_command(
             OUTPUT "${grpc_pb_cc}" "${grpc_pb_h}"
             COMMAND
-                $<TARGET_FILE:protobuf::protoc> ARGS
-                --plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>
+                ${Protobuf_PROTOC_EXECUTABLE} ARGS
+                --plugin=protoc-gen-grpc=${GOOGLE_CLOUD_CPP_GRPC_PLUGIN_EXECUTABLE}
                 "--grpc_out=${CMAKE_CURRENT_BINARY_DIR}"
                 "--cpp_out=${CMAKE_CURRENT_BINARY_DIR}" ${protobuf_include_path}
                 "${file_path}"
-            DEPENDS "${file_path}" protobuf::protoc gRPC::grpc_cpp_plugin
+            DEPENDS "${file_path}"
             COMMENT "Running gRPC C++ protocol buffer compiler on ${file_path}"
             VERBATIM)
     endforeach ()
diff --git a/doc/compile-time-configuration.md b/doc/compile-time-configuration.md
index 28ebcef023..f80747babb 100644
--- a/doc/compile-time-configuration.md
+++ b/doc/compile-time-configuration.md
@@ -41,6 +41,18 @@ a [GitHub Discussion]. With that said:
   opposed to gRPC over HTTP/2) in some libraries.
 - `experimental-opentelemetry` enables support for [OpenTelemetry].
 
+### Override Protobuf compiler and gRPC's plugin
+
+`google-cloud-cpp` uses the protobuf compiler and gRPC's plugin to generate
+code from the Protobuf API definitions. By default it finds these tools using
+the targets exported by `find_package(Protobuf CONFIG)` and
+`find_package(gRPC CONFIG)`.  These defaults do not work when cross-compiling,
+as the packages will point to the tools for the **target** environment, and
+they may not run in the host environment, where the build is running.
+
+You can override these tools using `-DProtobuf_PROTOC_EXECUTABLE=/path/...` and
+`-DGOOGLE_CLOUD_CPP_GRPC_PLUGIN_EXECUTABLE=/other-path/...`.
+
 ### Disabling C++ Exceptions
 
 `google-cloud-cpp` does not throw exceptions to signal errors. Though in some
diff --git a/examples/hello_world_grpc/CMakeLists.txt b/examples/hello_world_grpc/CMakeLists.txt
index fe9b69555e..375de2ffd9 100644
--- a/examples/hello_world_grpc/CMakeLists.txt
+++ b/examples/hello_world_grpc/CMakeLists.txt
@@ -33,7 +33,7 @@ add_custom_command(
            "${CMAKE_CURRENT_BINARY_DIR}/hello_world.pb.cc"
            "${CMAKE_CURRENT_BINARY_DIR}/hello_world.pb.h"
     COMMAND
-        $<TARGET_FILE:protobuf::protoc> ARGS
+        ${Protobuf_PROTOC_EXECUTABLE} ARGS
         --plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>
         "--grpc_out=${CMAKE_CURRENT_BINARY_DIR}"
         "--cpp_out=${CMAKE_CURRENT_BINARY_DIR}"
diff --git a/generator/CMakeLists.txt b/generator/CMakeLists.txt
index b29f49d344..8e0600d0f6 100644
--- a/generator/CMakeLists.txt
+++ b/generator/CMakeLists.txt
@@ -162,7 +162,7 @@ target_link_libraries(
 
 # Generate protobuf code and library
 if (COMMAND protobuf_generate)
-    set(protobuf_PROTOC_EXE $<TARGET_FILE:protobuf::protoc>)
+    set(protobuf_PROTOC_EXE ${Protobuf_PROTOC_EXECUTABLE})
     add_library(google_cloud_cpp_generator_config)
     protobuf_generate(LANGUAGE cpp TARGET google_cloud_cpp_generator_config
                       PROTOS generator_config.proto)
