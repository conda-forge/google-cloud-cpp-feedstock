{% set version = "2.11.0" %}

package:
  name: google-cloud-cpp-split
  version: {{ version }}

source:
  url: https://github.com/googleapis/google-cloud-cpp/archive/v{{ version }}.tar.gz
  sha256: a302ad006496a841f6aaca66a702714bf50ca6e71718193dcf58e0e8a70df561
  patches:
    # Several libraries do not compile under Conda.  Depending on the platform
    # and compiler, they need a newer version of Protobuf.  That is, they
    # compile with older versions of Protobuf on some combinations of platform,
    # compiler, and C++ standard library. For more information, see:
    #   https://github.com/googleapis/google-cloud-cpp/issues/8125
    #   https://github.com/googleapis/google-cloud-cpp/issues/8145
    #   https://github.com/googleapis/google-cloud-cpp/issues/8785
    - patches/0001-disable-libraries.patch  # [libprotobuf == "3.21"]
    # backport https://github.com/googleapis/google-cloud-cpp/pull/11782
    - patches/0002-fix-better-support-for-cross-compilation-11782.patch
    # don't try to build the protobuf-heavy googleapis as shared on win
    - patches/0003-do-not-try-to-build-external-googleapis-as-shared.patch  # [win]

build:
  number: 1
  # debug
  skip: true  # [not win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - libgrpc
    - libprotobuf
  host:
    - libabseil
    - libcrc32c
    - libcurl
    - libgrpc
    - libprotobuf
    - openssl
    - nlohmann_json
    - zlib

outputs:
  - name: libgoogle-cloud
    script: build-libgoogle-cloud.sh   # [unix]
    script: build-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud", max_pin="x.x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgrpc
        - libprotobuf
      host:
        - libabseil
        - libcrc32c
        - libcurl
        - libgrpc
        - libprotobuf
        - openssl
        - nlohmann_json
      run_constrained:
        - google-cloud-cpp {{ version }} *_{{ PKG_BUILDNUM }}
    test:
      commands:
      {% for component in ["bigtable", "storage"] %}
        # shared libs
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_{{ component }}.so.{{ version }}       # [linux]
        - test -f $PREFIX/lib/libgoogle_cloud_cpp_{{ component }}.{{ version }}.dylib    # [osx]
        - if not exist %LIBRARY_BIN%\\libgoogle_cloud_cpp_{{ component }}.dll exit 1     # [win]
        - if not exist %LIBRARY_LIB%\\libgoogle_cloud_cpp_{{ component }}.lib exit 1     # [win]
        # absence of headers
        - test ! -f $PREFIX/include/google/cloud/{{ component }}/version.h               # [unix]
        - if exist %LIBRARY_INC%\\google\\cloud\\{{ component }}\\version.h exit 1       # [win]
        # absence of metadata (pkgconfig)
        - test ! -f $PREFIX/lib/pkgconfig/google_cloud_cpp_{{ component }}.pc            # [unix]
        - if exist %LIBRARY_LIB%\\pkgconfig\\google_cloud_cpp_{{ component }}.pc exit 1  # [win]
        # absence of metadata (CMake)
        - test ! -f $PREFIX/lib/cmake/google_cloud_cpp_{{ component }}/google_cloud_cpp_{{ component }}-config.cmake             # [unix]
        - if exist %LIBRARY_LIB%\\cmake\\google_cloud_cpp_{{ component }}\\google_cloud_cpp_{{ component }}-config.cmake exit 1  # [win]
      {% endfor %}

  - name: google-cloud-cpp
    script: build-libgoogle-cloud.sh   # [unix]
    script: build-libgoogle-cloud.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage("libgoogle-cloud", max_pin="x.x.x") }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - libgrpc
        - libprotobuf
      host:
        - {{ pin_subpackage("libgoogle-cloud", exact=True) }}
        - libabseil
        - libcrc32c
        - libcurl
        - libgrpc
        - libprotobuf
        - openssl
        - nlohmann_json
      run:
        - {{ pin_subpackage("libgoogle-cloud", exact=True) }}
        - nlohmann_json
        # cannot load package without zlib because it's specified
        # as required; if possible, this should be removed upstream
        - zlib
    test:
      requires:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      files:
        - run_test_google_cloud_cpp.sh
        - run_test_google_cloud_cpp.bat
      source_files:
        - google/cloud/storage/quickstart/*.cc
        - google/cloud/storage/quickstart/CMakeLists.txt
      commands:
        - ./run_test_google_cloud_cpp.sh   # [unix]
        - ./run_test_google_cloud_cpp.bat  # [win]
      {% for component in ["bigtable", "storage"] %}
        # headers
        - test -f $PREFIX/include/google/cloud/{{ component }}/version.h                     # [unix]
        - if not exist %LIBRARY_INC%\\google\\cloud\\{{ component }}\\version.h exit 1       # [win]
        # pkgconfig
        - test -f $PREFIX/lib/pkgconfig/google_cloud_cpp_{{ component }}.pc                  # [unix]
        - if not exist %LIBRARY_LIB%\\pkgconfig\\google_cloud_cpp_{{ component }}.pc exit 1  # [win]
        # CMake
        - test -f $PREFIX/lib/cmake/google_cloud_cpp_{{ component }}/google_cloud_cpp_{{ component }}-config.cmake                   # [unix]
        - if not exist %LIBRARY_LIB%\\cmake\\google_cloud_cpp_{{ component }}\\google_cloud_cpp_{{ component }}-config.cmake exit 1  # [win]
      {% endfor %}

about:
  home: https://github.com/googleapis/google-cloud-cpp
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Google Cloud Client Library for C++

extra:
  feedstock-name: google-cloud-cpp
  recipe-maintainers:
    - coryan
    - davidbrochart
    - dbolduc
    - h-vetinari
    - xhochy
